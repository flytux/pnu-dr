apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: jib-maven
  labels:
    app.kubernetes.io/version: "0.4"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/tags: image-build
    tekton.dev/displayName: "jib maven"
spec:
  description: >-
    This Task builds Java/Kotlin/Groovy/Scala source into a container image using Google's Jib tool.

    Jib works with Maven and Gradle projects, and this template is for Maven projects.

  params:
  - name: IMAGE
    description: Name of the image to build
  - name: MAVEN_IMAGE
    type: string
    description: Maven base image
    default: maven:3.3.9-jdk-8-alpine
  - name: DIRECTORY
    description: The directory containing the app, relative to the source repository root
    default: .
  - name: CACHE
    description: The name of the volume for caching Maven artifacts and base image layers
    default: empty-dir-volume
  - name: INSECUREREGISTRY
    description: Whether to allow insecure registry
    default: "false"
  - name: CACERTFILE
    description: CA cert file name for insecure registry service
    default: "service-ca.crt"
  workspaces:
  - name: source
  - name: sslcertdir
    optional: true
    mountPath: /tekton-custom-certs

  results:
  - name: IMAGE_DIGEST
    description: Digest of the image just built.

  steps:
  - name: build-and-push
    image: $(params.MAVEN_IMAGE)
    # Make sh evaluate $HOME.
    script: |
      #!/bin/bash

      [[ -f  /tekton-custom-certs/$(params.CACERTFILE) ]] && \
      keytool -import -keystore $JAVA_HOME/lib/security/cacerts -storepass "changeit" -file /tekton-custom-certs/$(params.CACERTFILE) -noprompt

      mvn -B \
        -Duser.home=$HOME \
        -DsendCredentialsOverHttp=true \
        -Djib.allowInsecureRegistries=$(params.INSECUREREGISTRY) \
        -Djib.to.image=$(params.IMAGE) \
        -Djib.from.image=tomcat:9.0.82-jre8 \
        -Djib.container.appRoot=/usr/local/tomcat/webapps/ROOT \
        clean package \
        com.google.cloud.tools:jib-maven-plugin:3.4.0:build
    workingDir: $(workspaces.source.path)/$(params.DIRECTORY)
    env:
    - name: HOME
      value: /workspace
    - name: "DOCKER_CONFIG"
      value: $(credentials.path)/.docker/
    volumeMounts:
    - name: m2-cache
      mountPath: /workspace/.m2

  - name: digest-to-results
    image: $(params.MAVEN_IMAGE)
    script: cat $(workspaces.source.path)/target/jib-image.digest | tee /tekton/results/IMAGE_DIGEST

  volumes:
  - name: m2-cache
    persistentVolumeClaim:
      claimName: pvc-cache
